{"version":3,"sources":["App.tsx","GoodList.tsx","index.tsx"],"names":["SortType","GoodList","goods","map","good","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","ALPHABET","sort","currentGood","nextGood","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","prevState","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECHUC,EAVmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnC,OACE,6BACGA,EAAMC,KAAI,SAACC,GACV,OAAO,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,SDJXC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAyCE,IAAMM,EAAgB,WAC3B,MAAoCC,oBAAkB,GAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBP,EAASU,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACMV,EAhCD,SACLA,EADK,GAGJ,IADCS,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNK,EAAY,YAAOX,GAEzB,OAAQS,GACN,KAAKX,EAASc,SACZD,EAAaE,MAAK,SAACC,EACjBC,GADgB,OACHD,EAAYE,cAAcD,MACzC,MAEF,KAAKjB,EAASmB,OACZN,EAAaE,MAAK,SAACC,EACjBC,GADgB,OACHD,EAAYI,OAASH,EAASG,UAWjD,OAJIZ,GACFK,EAAaQ,UAGRR,EAMOS,CAAkBjB,EAAiB,CAAEM,WAAUH,eAmB7D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYd,IAAaX,EAASc,WAGtCY,QAAS,WA3Bfd,EAAYZ,EAASc,WAmBjB,iCAaA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYd,IAAaX,EAASmB,SAGtCO,QAAS,WApCfd,EAAYZ,EAASmB,SA4BjB,4BAaA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAajB,IAGjBkB,QAAS,WA7CfjB,GAAc,SAACkB,GAAD,OAAiBA,MAqC3B,sBAaEhB,IAAaX,EAASU,MAAQF,IAE5B,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAnDnBd,EAAYZ,EAASU,WACrBD,GAAc,IA+CN,sBAUN,6BACE,cAAC,EAAD,CAAUP,MAAOA,UEtIzB0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.adfda12d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport GoodList from './GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((currentGood,\n        nextGood) => currentGood.localeCompare(nextGood));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((currentGood,\n        nextGood) => currentGood.length - nextGood.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const handleAlphabeticalSort = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsReversed((prevState) => (!prevState));\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => handleAlphabeticalSort()}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => handleLengthSort()}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => handleReverse()}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => handleReset()}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <GoodList goods={goods} />\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  goods: string[]\n};\n\nconst GoodList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map((good) => {\n        return <li key={good} data-cy=\"Good\">{good}</li>;\n      })}\n    </ul>\n  );\n};\n\nexport default GoodList;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}